# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Appointment {
  availability: Availability
  createdAt: DateTime!
  deletedAt: DateTime
  end: DateTime!
  id: ID!
  medecin: Medecin!
  mode: Mode!
  patient: Patient!
  payment: Payment
  prescription: Prescription
  start: DateTime!
  status: AppointmentStatus!
  updatedAt: DateTime!
}

enum AppointmentStatus {
  Cancelled
  Completed
  Confirmed
  NoShow
  Pending
}

type AppointmentType {
  end: DateTime!
  id: ID!
  medecin: Medecin!
  mode: String!
  patient: Patient!
  payment: PaymentType!
  start: DateTime!
  status: String!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Availability {
  appointments: [Appointment!]
  capacity: Int!
  createdAt: DateTime!
  deletedAt: DateTime
  end: DateTime!
  id: ID!
  medecin: Medecin!
  start: DateTime!
  type: AvailabilityType!
  updatedAt: DateTime!
}

type AvailabilityDTO {
  capacity: Float!
  end: DateTime!
  id: ID!
  medecin: Medecin!
  start: DateTime!
  type: String!
}

enum AvailabilityType {
  Weekday
  Weekend
}

input BookAppointmentInput {
  end: DateTime!
  mode: String!
  paymentMethodId: String
  start: DateTime!
}

input CreateAvailabilityInput {
  end: DateTime!
  recurring: Boolean
  start: DateTime!
  type: String!
}

input CreatePrescriptionInput {
  appointmentId: String!
  items: [PrescriptionItemInput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DoctorSignature {
  certificateChain: String!
  doctor: Medecin!
  id: ID!
  prescriptions: [Prescription!]!
  signatureBlob: String!
  signatureType: SignatureType!
  signedAt: DateTime!
  tsaToken: String!
}

type HealthStatus {
  status: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum KycStatus {
  Pending
  Rejected
  Verified
}

input LoginInput {
  email: String!
  password: String!
}

type Medecin {
  appointments: [Appointment!]
  availabilities: [Availability!]
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  lieux: [String!]!
  rpps: String!
  signatures: [DoctorSignature!]
  specialites: [String!]!
  tarifs: Int!
  updatedAt: DateTime!
  user: User!
  weekendPremium: Int!
}

enum Mode {
  Presentiel
  Visio
}

type Mutation {
  addAssurance(assurance: String!, patientId: String!): Patient!
  bookAppointment(doctorId: String!, input: BookAppointmentInput!, patientId: String!): AppointmentType!
  cancelAppointment(appointmentId: String!, reason: String): AppointmentType!
  createAvailability(doctorId: String!, input: CreateAvailabilityInput!): [AvailabilityDTO!]!
  createPrescription(input: CreatePrescriptionInput!): Prescription!
  login(input: LoginInput!): AuthPayload!
  loginWithOtp(input: OtpLoginInput!): AuthPayload!
  paymentIntent(appointmentId: String!): Payment!
  refreshToken: AuthPayload!
  requestOtp(email: String, phone: String): Boolean!
  signPrescription(prescriptionId: String!): Prescription!
  signup(input: SignupInput!): AuthPayload!
  startTeleconsultation(appointmentId: String!): Appointment!
  updateDossiers(dossiers: String!, patientId: String!): Patient!
}

input OtpLoginInput {
  email: String
  otp: String!
  phone: String
}

type Patient {
  assurances: [String!]!
  createdAt: DateTime!
  dateNaissance: DateTime
  deletedAt: DateTime
  dossiers: String!
  id: ID!
  updatedAt: DateTime!
  user: User!
}

type Payment {
  amount: Int!
  appointment: Appointment
  clientSecret: String
  createdAt: DateTime!
  currency: String!
  doctor: Medecin
  id: ID!
  metadata: JSON!
  patient: Patient
  provider: String!
  status: PaymentStatus!
  updatedAt: DateTime!
}

enum PaymentStatus {
  Canceled
  Processing
  Refunded
  RequiresConfirmation
  RequiresPaymentMethod
  Succeeded
}

type PaymentType {
  amount: Int!
  clientSecret: String
  currency: String!
  id: ID!
  provider: String!
  status: String!
}

type Pharmacie {
  adresse: String!
  apiEndpoint: String!
  createdAt: DateTime!
  deletedAt: DateTime
  dispatches: [PharmacyDispatch!]!
  gln: String!
  id: ID!
  lat: Float!
  lng: Float!
  nom: String!
  publicKey: String!
  updatedAt: DateTime!
}

type PharmacyDispatch {
  acceptedAt: DateTime
  createdAt: DateTime!
  dispensedAt: DateTime
  id: ID!
  pharmacie: Pharmacie!
  preparedAt: DateTime
  prescription: Prescription!
  receivedAt: DateTime
  rejectionReason: String
  status: PharmacyDispatchStatus!
  updatedAt: DateTime!
}

enum PharmacyDispatchStatus {
  Accepted
  Dispensed
  Prepared
  Received
  Rejected
}

type PharmacyType {
  adresse: String!
  apiEndpoint: String!
  gln: String!
  id: ID!
  lat: Float!
  lng: Float!
  nom: String!
  publicKey: String!
}

type Prescription {
  appointment: Appointment!
  createdAt: DateTime!
  deletedAt: DateTime
  doctorSignature: DoctorSignature
  hash: String!
  id: ID!
  items: [PrescriptionItem!]!
  jsonPayload: String
  pdfUrl: String
  sentToPharmacies: [String!]!
  status: PrescriptionStatus!
  updatedAt: DateTime!
}

type PrescriptionItem {
  code: String
  denomination: String!
  dosage: String!
  dureeJours: Int!
  forme: String!
  id: ID!
  posologie: String!
  prescription: Prescription!
  renouvellement: Int!
}

input PrescriptionItemInput {
  code: String!
  denomination: String!
  dosage: String!
  dureeJours: Float!
  forme: String!
  posologie: String!
  renouvellement: Float!
}

enum PrescriptionStatus {
  Draft
  Revoked
  Signed
}

type Query {
  MediaCapabilities(from: String!, medecinId: String!, to: String!): [Availability!]!
  check: HealthStatus!
  doctorAvailabilities(doctorId: String!, from: String!, to: String!): [AvailabilityDTO!]!
  me: User!
  patientByUser(userId: String!): Patient
  paymentIntent(appointmentId: String!): PaymentType!
  pharmaciesNearby(lat: Float!, lng: Float!, radiusKm: Float = 10): [PharmacyType!]!
  prescription(id: String!): Prescription!
  searchMedecins(date: String!, specialite: String!, weekendOnly: Boolean): [Medecin!]!
  users: [User!]!
}

enum Role {
  Admin
  Medecin
  Patient
  Pharmacie
}

enum SignatureType {
  AES
  QES
}

input SignupInput {
  email: String!
  isOtpOnly: Boolean = false
  password: String
  phone: String
  role: Role! = Patient
}

type TeleconsultationSessionType {
  appointmentId: String!
  sessionUrl: String!
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  id: ID!
  isOtpOnly: Boolean!
  kycStatus: KycStatus!
  medecin: Medecin
  patient: Patient
  phone: String!
  role: Role!
  twoFAEnabled: Boolean!
  updatedAt: DateTime
}